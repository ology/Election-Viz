#!/usr/bin/perl

=head1 PROGRAM

Convert the wikipedia C<wikitable> for presidential election results, by state,
into a columnar data file.

=head2 VERSION

0.01

=head2 AUTHOR

Gene Boggs C<gene plus github at ology dot net>

=head2 HISTORY

0.02 - Parse the page as a string, not lines.
0.01 - Raw crude wildcatting.

=head2 TO DO

Investigate L<MediaWiki::DumpFile>

=cut

use strict;
use warnings;

use WWW::Wikipedia;

my $year  = shift || 2012;
my $title = 'United_States_presidential_election,_' . $year;

my $wiki  = WWW::Wikipedia->new;
my $entry = $wiki->search($title);

# Isolate the election results table.
my $match = qr/.*?(Results by state.+?)\n$/ms;
(my $text = $entry->fulltext) =~ s/\A$match.*?\Z/$1/ms;

# Ameliorate wikipedia franken-markup artifacts:
# Remove newlines.
$text =~ s/\n//g;
# Remove insane wikipedia markup bits.
$text =~ s/class="wikitable(?: sortable)?"//g;
$text =~ s/Results by state <ref><\/ref> {\|//g;
$text =~ s/States won by \w+\/\w+//g;
$text =~ s/colspan=\d+//g;
$text =~ s/align[=:]center;?//g;
$text =~ s/ font-size:!? \d+%//g;
$text =~ s/data-sort-//g;
# Match a generic element attribute.
$text =~ s/\w+="[\w :-]+\|?!?\s*?;?"//msg;
# Handle hybrid newlines.
$text =~ s/!//g;
$text =~ s/<br>/ /g;

# Extract the table parts.
if ( $text =~ /^.+?(\w+.+?)Margin.+?\|\s*(State  .+?)(Alabama.+)\s*}$/ ) {
    my ($candidates, $headers, $data) = ($1, $2, $3);

    # Extract the candidates.
    my @candidates = split /\s*\|\s*/, $candidates;

    # Extract the table headers.
    my @headers = split /\s*\|\s*/, $headers;

    # Eliminate spurious | characters.
    $data =~ s/\|//g;

    # Extract the data rows.
    my @data = $data =~ /([A-Z]\w{3,}(?: \w+)?.+?[A-Z]{2} -?)/g;

    # Split the rows into cells of individual data.
    @data = map { [ split(/ /, $_) ] } @data;

    # Sanitize the data one last time.
    for my $row (@data) {
        # Fix 2-name states.
        if ( $row->[0] =~ /^\w+$/ && $row->[1] =~ /^\w+$/ ) {
            my $name = shift @$row;
            $row->[0] = "$name $row->[0]";
        }

        # Eliminate empty entries.
        @$row = grep { $_ ne '' } @$row;
    }

    # Output the table.
    print join("\t", @candidates), "\n";
    print join("\t", @headers), "\n";
    print join("\n", map { join "\t", @$_ } @data);
}

