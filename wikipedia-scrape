#!/usr/bin/perl

=head1 PROGRAM

wikipedia-scrape

=head1 DESCRIPTION

Convert the wikipedia C<wikitable> for presidential election (votes) results by
state, into a columnar data file.

=head2 AUTHOR

Gene Boggs C<gene plus github at ology dot net>

=cut

use strict;
use warnings;

use HTML::TableExtract;
use LWP::UserAgent;

# Get the year from the commandline.
my $year = shift || 2012;

# Set the signature for the "vote results by states" data table.
my $fingerprint = qr/^Alabama,\d+,\d+,.+$/;

# Cached raw data file.
my $filename = sprintf 'data/html-%d.txt', $year;

# String to hold the harvest or read results.
my $html = cached($year, $filename);

# Parse an entry with a TableExtract object.
my $tx = HTML::TableExtract->new;
$tx->parse($html);

# Find the right table.
my $found = 0;
for my $tab ($tx->tables) {
    # Process the results table, if found.
    if ($found) {
        process_table($tab);
        # This is the last table to consider.
        last;
    }
    else {
        # Look for the right table.
        for my $row ($tab->rows) {
            # Turn the row into a csv.
            my $string = join ',', map { defined $_ ? $_ : '' } @$row;
            # Stop looking if the csv is a signature match.
            if ( $string =~ $fingerprint ) {
                $found++;
                last;
            }
        }
        # Rewind the rows if we've found the right table.
        redo if $found;
    }
}

sub process_table {
    my $table = shift;
    warn 'FOUND: Table [', join(',', $table->coords), "]\n";
}

sub cached { # Cache or harvest a wikipedia entry.
    my ($year, $filename) = @_;

    if (-e $filename) {
        warn "Cached data exists in $filename\n";
        # Read the cashed wikipedia text.
        local $/;
        open my $input, '<', $filename or die "Can't read $filename: $!";
        # Set the text for matching.
        $html = <$input>;
    }
    else {
        # Harvest from wikipedia.
        my $url = 'https://en.wikipedia.org/wiki/';
        $url .= 'United_States_presidential_election,_' . $year;
        warn "Harvesting new data from entry: '$url'\n";
        my $agent = LWP::UserAgent->new;
        my $response = $agent->get($url);
        # Cache the raw entry.
        $html = $response->content;
        open my $output, '>', $filename or die "Can't write to $filename: $!";
        print $output $html;
    }
    return $html;
}
