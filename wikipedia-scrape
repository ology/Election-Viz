#!/usr/bin/perl

=head1 PROGRAM

Convert the wikipedia C<wikitable> for presidential election results, by state,
into a columnar data file.

=head2 AUTHOR

Gene Boggs C<gene plus github at ology dot net>

=head2 TO DO

Investigate L<MediaWiki::DumpFile>

=cut

use strict;
use warnings;

use WWW::Wikipedia;

# Get the year from the commandline.
my $year = shift || 2012;

# String to hold the harvest or read results.
my $text = '';

# Cached raw data file.
my $filename = sprintf 'data/raw-%d.txt', $year;

# Cache or harvest?
if (-e $filename) {
    warn "Cached data exists in $filename\n";
    # Read the cashed wikipedia text.
    local $/;
    open my $input, '<', $filename or die "Can't read $filename: $!";
    # Set the text for matching.
    $text = <$input>;
}
else {
    # Construct the entry title.
    my $title = 'United_States_presidential_election,_' . $year;
    warn "Harvesting new data from entry: '$title'\n";
    # Harvest from wikipedia.
    my $wiki  = WWW::Wikipedia->new;
    my $entry = $wiki->search($title) or die "ERROR: No such entry\n";
    # Cache the raw entry.
    open my $output, '>', $filename or die "Can't write to $filename: $!";
    # Set the text for matching.
    $text = $entry->fulltext;
    print $output $text;
}

# Isolate the election results table.
my $match = qr/.*?((?:Results|Votes)\s+by\s+state.+?)\n$/ms;
$text =~ s/\A$match.*?\Z/$1/ms;

# Ameliorate wikipedia franken-markup artifacts:
# Replace newlines with spaces.
$text =~ s/\n/ /g;
# Remove wikipedia markup bits.
$text =~ s/class="wikitable(?: sortable)?"//g;
$text =~ s/Results by state <ref><\/ref>//g;
$text =~ s/States won by \w+\/\w+//g;
$text =~ s/colspan=\d+//g;
$text =~ s/align[=:]center;?//g;
$text =~ s/data-sort-//g;
# Match generic element attributes.
$text =~ s/\w+="[^"]+"//g;
# Handle hybrid newlines.
$text =~ s/!//g;
$text =~ s/<br>/ /g;

# Extract the table parts.
if ( $text =~ /^.+?(\w+.+?)Margin.+?(State\s*\|\s+.+?)(Alabama.+?)}\s*$/ ) {
    my ($candidates, $headers, $data) = ($1, $2, $3);

    # Extract the candidates.
    my @candidates = split /\s*\|\s*/, $candidates;

    # Extract the table headers.
    my @headers = split /\s*\|\s*/, $headers;

    # Eliminate spurious | characters.
    $data =~ s/\|//g;

    # Extract the data rows.
    my @data = $data =~ /([A-Z]\w{3,}(?: \w+)?.+?[A-Z]{2} -?)/g;

    # Split the rows into cells of individual data.
    @data = map { [ split(/ /, $_) ] } @data;

    # Sanitize the data one last time.
    for my $row (@data) {
        # Fix 2-name states.
        if ( $row->[0] =~ /^\w+$/ && $row->[1] =~ /^\w+$/ ) {
            my $name = shift @$row;
            $row->[0] = "$name $row->[0]";
        }

        # Eliminate empty entries.
        @$row = grep { $_ ne '' } @$row;
    }

    # Output the table.
    print join("\|", @candidates), "\n";
    print join("\|", @headers), "\n";
    print join("\n", map { join "\|", @$_ } @data);
}

