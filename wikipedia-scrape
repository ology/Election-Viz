#!/usr/bin/perl

=head1 PROGRAM

wikipedia-scrape

=head1 USAGE

 > perl wikipedia-scrape 1900 # => data/1900.dat
 > perl wikipedia-scrape -1   # => 1900 - 2012

=head1 DESCRIPTION

Convert the wikipedia table of presidential election results by state, into a
columnar data file.

=head2 AUTHOR

Gene Boggs C<gene plus github at ology dot net>

=cut

use strict;
use warnings;

use HTML::TableExtract;
use LWP::UserAgent;

# Known election years.
my @range = (1900, 2012);

# Get the year from the commandline.
my $year = shift || $range[1];

# Declare the years to inspect.
my @years = ();

# Either look at a single year or all known years.
if ($year > 0) {
    push @years, $year;
} else {
    # Construct the election year list.
    for (my $i = $range[0]; $i <= $range[1]; $i = $i + 4) {
        push @years, $i;
    }
}

# Inspect each year...
for $year (@years) {
# Cached data file.
my $filename = sprintf 'data/%d.html', $year;

# String to hold the harvest or read results.
my $html = cached($year, $filename);

# Parse an entry with a TableExtract object.
my $tx = HTML::TableExtract->new;
$tx->parse($html);

# Get the election results table parts.
my ($candidates, $data) = table_locate($tx);

# Output the table, in tab-separated lines.
if (@$candidates and @$data) {
    my $dat_file = "data/$year.dat";
    open my $dat, '>', $dat_file or die "Can't write to $dat_file: $!";
    print $dat join("\n",
        join("\t", @$candidates),
        join("\n", map { join("\t", @$_) } @$data)
    );
} else {
    warn "Cannot process $filename into candidates and data\n";
}
}

sub table_locate { # Find the right table in the entry.
    # Get a TableExtract object or fail.
    my $tx = shift || die "ERROR: No TableExtract object given.\n";

    # Get the election results table parts.
    my ($candidates, $data);

    # Traverse the tables, inspecing rows...
    my $found = 0;
    for my $tab ($tx->tables) {
        # Process the results table, if found.
        if ($found) {
            ($candidates, $data) = process_table($tab);
            # This is the last table to consider.
            last;
        } else {
            # Look for the right table.
            for my $row ($tab->rows) {
                # Turn the row into a csv.
                my $string = join ',', map { defined $_ ? $_ : '' } @$row;
                # Stop looking if the csv is a signature match.
                if ( $string =~ /^Alabama,[\d-]+,.+$/ ) {
                    $found++;
                    last;
                }
            }
            # Rewind the rows if we've found the right table.
            redo if $found;
        }
    }

    return $candidates, $data;
}

sub process_table { # Sanitize the table parts.
    my $table = shift;
    warn 'FOUND: Table [', join(',', $table->coords), "]\n";

    # Declare buckets for our table.
    my (@candidates, @data);

    # Set the "locate-table" flag to FALSE.
    my $seen = 0;

    # Items to exclude from the candidate list.
    my $exclude = qr/^(?:%|P|Electors|Margin|State|Total)?$/;

    # Common sanitizing function.
    my $min_space = sub {
        my $string = shift;
        $string =~ s/\n/ /g; # Replace newlines with a space.
        $string =~ s/\s+/ /g; # Collapse multiple spaces.
        return $string;
    };

    # Parse out the candidates and data.
    for my $row ($table->rows) {
        if ( $seen || ($row->[0] && $row->[0] =~ /^State|Alabama$/) ) {
            # Note that we have seen the data.
            $seen++;

            # Sanitize the record.
            for my $cell ( @$row ) {
#                warn "C: '$cell'\n"; # <- TESTING
                # Handle header data.
                if ($row->[0] =~ /^State$/) {
                    $cell = 'XX' unless defined $cell; # Make undefined cells Xs.
                    $cell =~ s/^(?:\D+)?%$/P/g; # Replace a non-digit or lone % with P.
                    $cell =~ s/#/N/g; # Replace #s with Ns.
                    $cell = $min_space->($cell);
                } else {
                    # Handle row data.
                    $cell =~ s/,//g; # Remove commas.
                    $cell =~ s/^([\d.-]+)%$/$1/g; # Remove the % sign from data.
                    $cell =~ s/^((?:u\.s\.?\s*)?total.*)$/#$1/ig; # Comment total lines.
                }
                # Handle common data.
                $cell =~ s/[[:^ascii:]]+/-/g; # Replace consecutive non-ascii with -.
#                warn "\t'$cell'\n"; # <- TESTING
            }

#            warn 'R: ',scalar(@$row),"\n"; # <- TESTING
            push @data, $row;
        } else {
            # Save the sanitized candidate list.
            push @candidates,
                grep { defined && !/^I|Margin|State Total$/ } @$row;
        }

        # If none found, parse header.
        unless ( @candidates ) {
            # Save the sanitized candidate list.
            push @candidates,
                grep { defined && !/$exclude/ } @{ $data[0] };

            # Normalize headers.
            for (@{ $data[0] }) {
                $_ = 'N' unless /$exclude/;
            }
        }
    }

    for (@candidates) {
        $_ = $min_space->($_);
    }

    return \@candidates, \@data;
}

sub cached { # Cache or harvest a wikipedia entry.
    my ($year, $filename) = @_;

    # The file contents.
    my $html = '';

    if (-e $filename) {
        warn "Cached data exists in $filename\n";
        # Read the cashed wikipedia text.
        local $/;
        open my $input, '<', $filename or die "Can't read $filename: $!";
        # Set the text for matching.
        $html = <$input>;
    } else {
        # Harvest from wikipedia.
        my $url = 'https://en.wikipedia.org/wiki/';
        $url .= 'United_States_presidential_election,_' . $year;
        warn "Harvesting new data from entry: '$url'\n";
        my $agent = LWP::UserAgent->new;
        my $response = $agent->get($url);
        # Die if no entry exists exists.
        my $error = 'Wikipedia does not have an article with this exact name';
        die "$error.\n" if $response->content =~ /$error/;
        # Cache the entry.
        $html = $response->content;
        open my $output, '>', $filename or die "Can't write to $filename: $!";
        binmode $output, ':utf8';
        print $output $html;
    }

    return $html;
}
